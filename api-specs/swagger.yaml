openapi: 3.0.1
info:
  title: Maxine API
  version: v1.1
  description: >-
    Maxine is a service discovery and a naming server for microservices that
    solves the issue of hard-wiring urls by hostnames and ports.
  contact:
    name: Vrushank Patel
  license:
    name: MIT
    url: https://github.com/VrushankPatel/Maxine-Server/blob/master/LICENSE
paths:
  /api/maxine/signin:
    post:
      summary: To sign in and get auth token.
      tags:
        - "UAC"
      operationId: Maxine Security
      requestBody:
        description: User.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
        required: true
      responses:
        '200':
          description: OK
          content:
            application/json:
              example: >-
                {"accessToken":"eyJhbGciOiJIUzI1GiIsInR5cCI6IkpXVCJ9.eyJ1c2VyTmFtZSI6ImFkbWluIiwicGFzc3dvcmQiOiJhZG1pbiIsImlhdCI6MTY0OTMyNTI0NywiZXhwIjoxNjQ5NDExMjQ3fQ.yQev9kn9yIChCXE-vlOLpc3Y89qNy_p7TKxoDJ1HghQ"}
        '401':
          description: Unauthorized
          content:
            application/json:
              example: '{"message":"Unauthorized"}'
        '400':
          description: Error, Bad Request
          content:
            application/json:
              example: '{"message":"Please provide both of these -> userName and password."}'
  /api/maxine/change-password:
    put:
      summary: To change the password
      tags:
        - "UAC"
      operationId: Maxine UAC
      security:
        - bearerAuth: []
      requestBody:
        description: Current password and new password to be updated.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Passwords'
        required: true
      responses:
        '200':
          description: OK
          content:
            application/json:
              example: >-
                {"message" : "successfully updated password"}
        '401':
          description: Unauthorized
          content:
            application/json:
              example: '{"message":"Unauthorized"}'
        '400':
          description: Error, Bad Request
          content:
            application/json:
              example: '{"message":"Please provide valid existing password and new password both."}'
  /api/actuator/metrics:
    get:
      summary: Get the memory metrics info
      tags:
        - "Actuator"
      operationId: actuatorMetrics
      responses:
        '200':
          description: 200 response
          content:
            application/json:
              example: >-
                {"mem": {"rss": 54534144,"heapTotal": 25661440,"heapUsed":
                22980160,"external": 1701211,"arrayBuffers": 83266},"uptime":
                47.998038}
  /api/actuator/info:
    get:
      summary: Get the project info
      tags:
        - "Actuator"
      operationId: actuatorInfo
      responses:
        '200':
          description: 200 response
          content:
            application/json:
              example: >-
                {"build":{"name":"maxine-discovery","description":"Maxine is a
                service discovery and a registry server for all the running
                nodes with gargantua client dependency.","version":"1.0.0"}}
  /api/actuator/health:
    get:
      summary: Get the currently running heartbeat
      tags:
        - "Actuator"
      operationId: actuatorHealth
      responses:
        '200':
          description: 200 response
          content:
            application/json:
              example: '{"status": "UP"}'
  /api/logs/download:
    get:
      summary: Get the Maxine log files and it's download path
      tags:
        - "Logs"
      operationId: Maxine Logs
      security:
        - bearerAuth: []
      responses:
        '200':
          description: OK
          content:
            application/json:
              example: '{"Maxine-info.log": "/api/logs/download/Maxine-info.log"}'
        '404':
          description: Not Found
          content:
            application/json:
              example: '{"message":"File not found"}'
   /api/maxine/serviceops/register:
     post:
       summary: >-
         Register the server with it's data (ServiceName, NodeName, Host, Port,
         Weight, ssl, timeOut, weight, path).
       tags:
         - "ServiceOps"
       operationId: Maxine service register
       requestBody:
         description: The service to register.
         content:
           application/json:
             schema:
               $ref: '#/components/schemas/Service'
         required: false
       responses:
         '200':
           description: OK
           content:
             application/json:
               example: >-
                 {"serviceName":"MAXINE-123","nodeName":"NODE-4","address":"http://192.168.23.11:8080","timeOut":50,"weight":5,"registeredAt":"5/4/2022,
                 10:00:56 am"}
         '400':
           description: Error, Bad Request
           content:
             application/json:
               example: >-
                 {"message": "Please provide all of these -> hostName, nodeName,
                 port and serviceName"}
       x-codegen-request-body-name: service
   /api/maxine/serviceops/deregister:
     delete:
       summary: Deregister a service node by serviceName and nodeName.
       tags:
         - "ServiceOps"
       operationId: Maxine service deregister
       requestBody:
         description: The service to deregister.
         content:
           application/json:
             schema:
               $ref: '#/components/schemas/Deregister'
         required: true
       responses:
         '200':
           description: OK
           content:
             application/json:
               example: '{"message": "Deregistered successfully"}'
         '404':
           description: Not Found
           content:
             application/json:
               example: '{"message": "Service not found"}'
         '400':
           description: Error, Bad Request
           content:
             application/json:
               example: '{"message": "Missing serviceName or nodeName"}'
       x-codegen-request-body-name: deregister
    /api/maxine/serviceops/discover:
      get:
        summary: >-
          Proxy the request to the registered service based on service name and load balancing strategy.
        tags:
          - "ServiceOps"
        operationId: Maxine service discover
        parameters:
          - in: query
            name: serviceName
            schema:
              type: string
              example: db-service
            required: true
          - in: query
            name: endPoint
            schema:
              type: string
              example: /info
            required: false
        responses:
          '200':
            description: OK
            content:
              '*/*':
                example: Response from the proxied service.
          '503':
            description: Service Unavailable
            content:
              application/json:
                example: '{"message": "Service Unavailable"}'
          '502':
            description: Bad Gateway
            content:
              application/json:
                example: '{"message": "Bad Gateway"}'
        x-codegen-request-body-name: service
    /api/maxine/serviceops/discover/filtered:
      get:
        summary: >-
          Proxy the request to the registered service based on service name, tags, and load balancing strategy.
        tags:
          - "ServiceOps"
        operationId: Maxine service filtered discover
        parameters:
          - in: query
            name: serviceName
            schema:
              type: string
              example: db-service
            required: true
          - in: query
            name: tags
            schema:
              type: string
              example: prod,api
            required: false
          - in: query
            name: endPoint
            schema:
              type: string
              example: /info
            required: false
        responses:
          '200':
            description: OK
            content:
              '*/*':
                example: Response from the proxied service.
          '503':
            description: Service Unavailable
            content:
              application/json:
                example: '{"message": "No nodes match the specified tags"}'
          '502':
            description: Bad Gateway
            content:
              application/json:
                example: '{"message": "Bad Gateway"}'
         x-codegen-request-body-name: service
     /api/maxine/serviceops/discover/info:
       get:
         summary: >-
           Get the service node information without proxying the request.
         tags:
           - "ServiceOps"
         operationId: Maxine service discover info
         parameters:
           - in: query
             name: serviceName
             schema:
               type: string
               example: db-service
             required: true
           - in: query
             name: version
             schema:
               type: string
               example: 1.0
             required: false
         responses:
           '200':
             description: OK
             content:
               application/json:
                 example: '{"serviceName":"db-service","node":{"nodeName":"node-x-1-0","address":"http://192.168.0.1:8080","metadata":{}}}'
           '503':
             description: Service Unavailable
             content:
               application/json:
                 example: '{"message": "Service Unavailable"}'
           '400':
             description: Bad Request
             content:
               application/json:
                 example: '{"message": "Missing serviceName"}'
          x-codegen-request-body-name: service
     /api/maxine/serviceops/discover/dns:
       get:
         summary: >-
           Get DNS SRV-like records for a service.
         tags:
           - "ServiceOps"
         operationId: Maxine service discover dns
         parameters:
           - in: query
             name: serviceName
             schema:
               type: string
             required: true
           - in: query
             name: version
             schema:
               type: string
             required: false
           - in: query
             name: namespace
             schema:
               type: string
             required: false
           - in: query
             name: region
             schema:
               type: string
             required: false
           - in: query
             name: zone
             schema:
               type: string
             required: false
         responses:
           '200':
             description: OK
             content:
               application/json:
                 example: '{"srvRecords": [{"name": "db-service", "host": "192.168.0.1", "port": 8080, "priority": 0, "weight": 1}]}'
           '400':
             description: Bad Request
             content:
               application/json:
                 example: '{"message": "Missing serviceName"}'
           '404':
             description: Service Not Found
             content:
               application/json:
                 example: '{"message": "Service not found"}'
         x-codegen-request-body-name: service
    /api/maxine/serviceops/servers:
    get:
      summary: >-
        Get all the registered servers in Maxine service registry if there are
        registered server nodes, otherwise empty object {}.
      tags:
        - "ServiceOps"
      operationId: Maxine services list
      security:
        - bearerAuth: []
      responses:
        '200':
          description: OK
          content:
            application/json:
              example: >-
                {"DB-SERVICE":{"offset":0,"nodes":{"NODE-X-1-0":{"nodeName":"NODE-X-1-0","parentNode":"NODE-X-1","address":"https://192.168.0.1:8082","timeOut":50,"registeredAt":"5/4/2022,
                3:38:58
                pm"},"NODE-X-1-1":{"nodeName":"NODE-X-1-1","parentNode":"NODE-X-1","address":"https://192.168.0.1:8082","timeOut":50,"registeredAt":"5/4/2022,
                3:38:58
                pm"},"NODE-X-1-2":{"nodeName":"NODE-X-1-2","parentNode":"NODE-X-1","address":"https://192.168.0.1:8082","timeOut":50,"registeredAt":"5/4/2022,
                3:38:58
                pm"},"NODE-X-1-3":{"nodeName":"NODE-X-1-3","parentNode":"NODE-X-1","address":"https://192.168.0.1:8082","timeOut":50,"registeredAt":"5/4/2022,
                3:38:58
                pm"},"NODE-X-1-4":{"nodeName":"NODE-X-1-4","parentNode":"NODE-X-1","address":"https://192.168.0.1:8082","timeOut":50,"registeredAt":"5/4/2022,
                3:38:58 pm"}}}}
        '401':
          description: Unauthorized
          content:
            application/json:
              example: '{"message":"Unauthorized"}'
         '403':
           description: Forbidden
           content:
             application/json:
               example: '{"message":"Forbidden"}'
    /api/maxine/serviceops/aliases/add:
      post:
        summary: Add an alias for a service.
        tags:
          - "ServiceOps"
        operationId: Maxine add alias
        security:
          - bearerAuth: []
        requestBody:
          description: The alias to add.
          content:
            application/json:
              schema:
                type: object
                required:
                  - alias
                  - serviceName
                properties:
                  alias:
                    type: string
                    example: db-service-alias
                  serviceName:
                    type: string
                    example: db-service
                  version:
                    type: string
                    example: 1.0
                  namespace:
                    type: string
                    example: default
                  region:
                    type: string
                    example: default
                  zone:
                    type: string
                    example: default
          required: true
        responses:
          '200':
            description: OK
            content:
              application/json:
                example: '{"message": "Alias added successfully", "alias": "default:db-service-alias", "service": "default:db-service"}'
          '400':
            description: Bad Request
            content:
              application/json:
                example: '{"message": "alias and serviceName are required"}'
          '401':
            description: Unauthorized
            content:
              application/json:
                example: '{"message":"Unauthorized"}'
    /api/maxine/serviceops/aliases/remove:
      delete:
        summary: Remove an alias for a service.
        tags:
          - "ServiceOps"
        operationId: Maxine remove alias
        security:
          - bearerAuth: []
        requestBody:
          description: The alias to remove.
          content:
            application/json:
              schema:
                type: object
                required:
                  - alias
                properties:
                  alias:
                    type: string
                    example: db-service-alias
                  version:
                    type: string
                    example: 1.0
                  namespace:
                    type: string
                    example: default
                  region:
                    type: string
                    example: default
                  zone:
                    type: string
                    example: default
          required: true
        responses:
          '200':
            description: OK
            content:
              application/json:
                example: '{"message": "Alias removed successfully", "alias": "default:db-service-alias"}'
          '400':
            description: Bad Request
            content:
              application/json:
                example: '{"message": "alias is required"}'
          '401':
            description: Unauthorized
            content:
              application/json:
                example: '{"message":"Unauthorized"}'
    /api/maxine/serviceops/aliases:
      get:
        summary: Get aliases for services.
        tags:
          - "ServiceOps"
        operationId: Maxine get aliases
        security:
          - bearerAuth: []
        parameters:
          - in: query
            name: serviceName
            schema:
              type: string
              example: db-service
            required: false
          - in: query
            name: version
            schema:
              type: string
              example: 1.0
            required: false
          - in: query
            name: namespace
            schema:
              type: string
              example: default
            required: false
          - in: query
            name: region
            schema:
              type: string
              example: default
            required: false
          - in: query
            name: zone
            schema:
              type: string
              example: default
            required: false
        responses:
          '200':
            description: OK
            content:
              application/json:
                example: '{"aliases": [{"alias": "default:db-service-alias", "service": "default:db-service"}]}'
          '401':
            description: Unauthorized
            content:
              application/json:
                example: '{"message":"Unauthorized"}'
   /api/maxine/control/config:
    get:
      summary: Get the current config data of Maxine.
      tags:
        - "Controls"
      operationId: Maxine configuration Retrieval.
      security:
        - bearerAuth: []
      responses:
        '200':
            description: OK
            content:
              application/json:
                example: '{"logAsync":false,"heartBeatTimeout":3,"logJsonPrettify":false,"actuatorEnabled":true,"statusMonitorEnabled":true,"serverSelectionStrategy":{"name":"CH","code":"1","message":"Consistent Hashing","ordinal":1},"logFormat":{"name":"PLAIN","code":"1","message":"Plain logs","ordinal":1}}'
        '401':
          description: Unauthorized
          content:
            application/json:
              example: '{"message":"Unauthorized"}'
        '403':
          description: Forbidden
          content:
            application/json:
              example: '{"message":"Forbidden"}'
    put:
      summary: Update the config data of Maxine.
      tags:
        - "Controls"
      operationId: Maxine configuration manipulation
      security:
        - bearerAuth: []
      requestBody:
        description: The updated config data.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Config'
        required: false
      responses:
        '200':
          description: OK
          content:
            application/json:
              example: >-
                {"logAsync":"Success","heartBeatTimeout":"Success","logJsonPrettify":"Success","serverSelectionStrategy":"Success","logFormat":"Success"}
        '401':
          description: Unauthorized
          content:
            application/json:
              example: '{"message":"Unauthorized"}'
        '403':
          description: Forbidden
          content:
            application/json:
              example: '{"message":"Forbidden"}'
components:
  schemas:
     Service:
       required:
         - hostName
         - nodeName
         - serviceName
       type: object
       properties:
         hostName:
           type: string
           example: 192.168.0.1
         nodeName:
           type: string
           example: node-x-1
         port:
           maximum: 65353
           type: integer
           example: 8080
         serviceName:
           type: string
           example: db-service
         ssl:
           type: boolean
           example: false
         timeOut:
           minimum: 1
           type: integer
           example: 5
         weight:
           maximum: 10
           minimum: 1
           type: integer
           example: 5
         path:
           type: string
           example: /api/actuator
          metadata:
            type: object
            properties:
              healthEndpoint:
                type: string
                example: /health
              tags:
                type: array
                items:
                  type: string
                example: ["prod", "api"]
          aliases:
            type: array
            items:
              type: string
            example: ["db-service-alias", "database"]
            description: Alternative names for the service that can be used for discovery
    Config:
      type: object
      properties:
        logAsync:
          type: boolean
          example: false
        heartBeatTimeout:
          type: integer
          minimum: 1
          example: 3
        logJsonPrettify:
          type: boolean
          example: true
        serverSelectionStrategy:
          type: string
          enum: [RR, CH, RH]
          example: "CH"
          description: >
            Server Selection Strategies:

              * `RR` - Round Robin
              * `CH` - Consistent Hashing
              * `RH` - Rendezvous Hashing
        logFormat:
          type: string
          enum: [JSON, PLAIN]
          example: "JSON"
          description: >
            Log Formats:

              * `PLAIN` - Plain Logging
              * `JSON`  - JSON Logging
    User:
      type: object
      properties:
        userName:
          type: string
          example: "admin"
        password:
          type: string
          example: "admin"
     Passwords:
       type: object
       properties:
         password:
           type: string
           example: "admin"
         newPassword:
           type: string
           example: "admin2"
     Deregister:
       required:
         - serviceName
         - nodeName
       type: object
       properties:
         serviceName:
           type: string
           example: db-service
         nodeName:
           type: string
           example: node-x-1
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
